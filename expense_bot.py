import os
import logging
from datetime import datetime, timedelta

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from notion_client import Client
from dotenv import load_dotenv

# -----------------------------------------------------------------------------
# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
# -----------------------------------------------------------------------------
load_dotenv()  # —á–∏—Ç–∞–µ—Ç .env —Ä—è–¥–æ–º —Å –∫–æ–¥–æ–º

TELEGRAM_TOKEN       = os.getenv("TELEGRAM_TOKEN")
NOTION_TOKEN         = os.getenv("NOTION_TOKEN")
NOTION_DB_EXPENSES   = os.getenv("NOTION_DB_EXPENSES")
# (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–∞–∑—ã –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ –¥–æ–ª–≥–æ–≤)
# NOTION_DB_INCOME  = os.getenv("NOTION_DB_INCOME")
# NOTION_DB_DEBTS   = os.getenv("NOTION_DB_DEBTS")
# NOTION_DB_DEBTORS = os.getenv("NOTION_DB_DEBTORS")

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º http-–∫–ª–∏–µ–Ω—Ç Notion
notion = Client(auth=NOTION_TOKEN)

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

DATE_FORMAT = "%Y-%m-%d"


# -----------------------------------------------------------------------------
# 2. –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
# -----------------------------------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start: –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –æ—Ç—á–µ—Ç–∞
    """
    keyboard = [
        [KeyboardButton("–°–µ–≥–æ–¥–Ω—è"), KeyboardButton("–ù–µ–¥–µ–ª—è"), KeyboardButton("–ù–µ–¥–µ–ª—è2")],
        [KeyboardButton("–ù–µ–¥–µ–ª—è3"), KeyboardButton("–ú–µ—Å—è—Ü")],
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—Å—É–º–º–∞>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –µ–¥–∞ 6400",
        reply_markup=markup,
    )


# -----------------------------------------------------------------------------
# 3. –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç—á—ë—Ç–∞
# -----------------------------------------------------------------------------
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: –°–µ–≥–æ–¥–Ω—è, –ù–µ–¥–µ–ª—è, –ù–µ–¥–µ–ª—è2, –ù–µ–¥–µ–ª—è3, –ú–µ—Å—è—Ü
    —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ Notion –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ —à–ª—ë–º —Å–≤–æ–¥–∫—É.
    """
    cmd = update.message.text.lower()
    days_map = {
        "—Å–µ–≥–æ–¥–Ω—è": 1,
        "–Ω–µ–¥–µ–ª—è": 7,
        "–Ω–µ–¥–µ–ª—è2": 14,
        "–Ω–µ–¥–µ–ª—è3": 21,
        "–º–µ—Å—è—Ü": 31,
    }

    if cmd not in days_map:
        return  # –Ω–µ –Ω–∞—à–∞ –∫–Ω–æ–ø–∫–∞

    days = days_map[cmd]
    end = datetime.now()
    start = end - timedelta(days=days - 1)

    # –∑–∞–ø—Ä–æ—Å –∫ Notion
    query = {
        "filter": {
            "and": [
                {"property": "–î–∞—Ç–∞", "date": {"on_or_after": start.strftime(DATE_FORMAT)}},
                {"property": "–î–∞—Ç–∞", "date": {"on_or_before": end.strftime(DATE_FORMAT)}},
            ]
        }
    }
    result = notion.databases.query(database_id=NOTION_DB_EXPENSES, **query)

    # —Å–æ–±–∏—Ä–∞–µ–º —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    totals = {}
    for page in result.get("results", []):
        props = page["properties"]
        cat = props["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]["title"][0]["plain_text"]
        val = props["–°—É–º–º–∞"]["number"]
        totals[cat] = totals.get(cat, 0) + val

    if not totals:
        await update.message.reply_text("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.")
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞
    text = f"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ {days} –¥–Ω:\n"
    total_sum = 0
    for cat, val in sorted(totals.items(), key=lambda x: x[1], reverse=True):
        text += f"‚Ä¢ {cat}: {val:.2f}\n"
        total_sum += val
    text += f"\nüîπ –ò—Ç–æ–≥–æ: {total_sum:.2f}"

    await update.message.reply_text(text)


# -----------------------------------------------------------------------------
# 4. –•—ç–Ω–¥–ª–µ—Ä –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
# -----------------------------------------------------------------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤–∏–¥–∞ "<–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—Å—É–º–º–∞>". 
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ë–î —Ä–∞—Å—Ö–æ–¥–æ–≤ Notion.
    """
    text = update.message.text.strip()
    parts = text.split()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if len(parts) != 2 or not parts[1].replace(".", "", 1).isdigit():
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –µ–¥–∞ 6400")
        return

    cat, amt_str = parts
    amount = float(amt_str)
    today = datetime.now().strftime(DATE_FORMAT)

    try:
        notion.pages.create(
            parent={"database_id": NOTION_DB_EXPENSES},
            properties={
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": {"title": [{"text": {"content": cat}}]},
                "–°—É–º–º–∞": {"number": amount},
                "–î–∞—Ç–∞": {"date": {"start": today}},
            }
        )
        await update.message.reply_text(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {cat} {amount:.2f}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Notion: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


# -----------------------------------------------------------------------------
# 5. –ü–æ–¥–Ω—è—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ Webhook –Ω–∞ Render
# -----------------------------------------------------------------------------
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(
        MessageHandler(
            filters.TEXT
            & ~filters.COMMAND
            & filters.Regex("^(–°–µ–≥–æ–¥–Ω—è|–ù–µ–¥–µ–ª—è|–ù–µ–¥–µ–ª—è2|–ù–µ–¥–µ–ª—è3|–ú–µ—Å—è—Ü)$"),
            report
        )
    )
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    # –∑–∞–ø—É—Å–∫–∞–µ–º webhook-—Å–µ—Ä–≤–µ—Ä
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", "10000")),
        url_path=TELEGRAM_TOKEN,  # 
        webhook_url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/{TELEGRAM_TOKEN}"
    )


if __name__ == "__main__":
    main()
